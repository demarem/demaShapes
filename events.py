#! /usr/bin/env python
'''
@author: Matthew Demarest
@version: 1.1
@summary: Events sent to mediator EventManager of demaShapes game.
'''


# Point of control for debugging
def debug(msg):
    print msg

# EVENT CONSTANTS


class Event:
    '''Superclass for any events that might be generated by an object and sent
    to the EventManager
    '''

    def __init__(self):
        self.name = "Generic Event"


class TickEvent(Event):
    def __init__(self):
        self.name = "CPU Tick Event"


class QuitEvent(Event):
    def __init__(self):
        self.name = "Program Quit Event"


class WindowBuiltEvent(Event):
    def __init__(self, window):
        self.name = "Window Finished Building Event"
        self.window = window


class BoardBuiltEvent(Event):
    def __init__(self, board):
        self.name = "Board Finished Building Event"
        self.board = board


class GameStartedEvent(Event):
    def __init__(self, game):
        self.name = "Game Started Event"
        self.game = game


class ShapeStartMoveRequest(Event):
    def __init__(self, direction):
        self.name = "Shape Start Move Request"
        self.direction = direction


class ShapeStopMoveRequest(Event):
    def __init__(self, direction):
        self.name = "Shape Stop Move Request"
        self.direction = direction


class ShapeRotateRequest(Event):
    def __init__(self, direction):
        self.name = "Shape Rotate Request"
        self.direction = direction


class ShapeDropRequest(Event):
    def __init__(self):
        self.name = "Shape Drop Request"


class ShapeAlteredEvent(Event):
    def __init__(self, shape):
        self.name = "Shape Altered Event"
        self.shape = shape


class ScoreUpdateEvent(Event):
    def __init__(self, score):
        self.name = "Score Update Event"
        self.score = score


class ShapeFallEvent(Event):
    ''' Time induced block fall. '''
    def __init__(self):
        self.name = "Shape Drop Event"

# Possible other events: clear blocks,


#------------------------------------------------------------------------------
class EventManager:
    '''This object is responsible for the coordinating most communication
    between the Model, View, and Controller.'''
    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()
        self.eventQueue = []


    #--------------------------------------------------------------------------
    def registerListener(self, listener):
        self.listeners[listener] = 1

    #--------------------------------------------------------------------------
    def unregisterListener(self, listener):
        if listener in self.listeners:
            del self.listeners[listener]


    #--------------------------------------------------------------------------
    def post(self, event):
        if not isinstance(event, TickEvent()):
            debug("    Message: " + event.name)
        for listener in self.listeners:
            listener.Notify(event)

