'''
@author: Matthew Demarest
@version: 1.1
@summary: Controls from user, running ticks, and timer to signal events.
'''

from constants import *
import events
import pygame
from pygame.locals import *
import inGameKeyboardController as inGame
import gameOverKeyboardController as gameOver

DROPDELAY = 1000  # 1 seconds
DROPEVENT = USEREVENT + 1  # signals the time to drop a block

class KeyboardController:
    '''KeyboardController takes Pygame events generated by the keyboard and
    uses them to control the model, by sending requests or to control the
    Pygame display directly, as with the QuitEvent
    '''
    STATE_INGAME = 'KEYBOARD STATE: In Game'
    STATE_PAUSED = 'KEYBOARD STATE: Paused'
    STATE_GAMEOVER = 'KEYBOARD STATE: Game Over'
    STATE_HIGHSCORE = 'KEYBOARD STATE: High Score'
    STATE_MENU = 'KEYBOARD STATE: Menu'

    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.registerListener(self)

        self.state = KeyboardController.STATE_INGAME

        self.stateMap = {KeyboardController.STATE_INGAME:
                            inGame.InGameKeyboardController(),
                         KeyboardController.STATE_GAMEOVER:
                            gameOver.GameOverKeyboardController()}

    def notify(self, event):
        if isinstance(event, events.TickEvent):
            ev = self.stateMap[self.state].read()
            if ev:
                self.evManager.post(ev)

        elif isinstance(event, events.GameOverEvent):
            self.state = KeyboardController.STATE_GAMEOVER

        elif isinstance(event, events.ResetEvent):
            self.state = KeyboardController.STATE_INGAME

